using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;

namespace HideMyEmailGenerator
{
    public class HideMyEmail : IAsyncDisposable
    {
        private readonly string _baseUrlV1 = "https://p68-maildomainws.icloud.com/v1/hme";
        private readonly string _baseUrlV2 = "https://p68-maildomainws.icloud.com/v2/hme";
        private readonly Dictionary<string, string> _params = new Dictionary<string, string>
        {
            { "clientBuildNumber", "2413Project28" },
            { "clientMasteringNumber", "2413B20" },
            { "clientId", "" },
            { "dsid", "" } // Directory Services Identifier (DSID) is a method of identifying AppleID accounts
        };

        private HttpClient _httpClient;
        private string _label;
        private string _cookies;

        /// <summary>
        /// Initializes the HideMyEmail class.
        /// </summary>
        /// <param name="label">Label that will be set for all emails generated, defaults to `rtuna's gen`</param>
        /// <param name="cookies">Cookie string to be used with requests. Required for authorization.</param>
        public HideMyEmail(string label = "rtuna's gen", string cookies = "")
        {
            _label = label;
            Cookies = cookies;
        }

        public string Cookies
        {
            get => _cookies;
            set => _cookies = value?.Trim() ?? ""; // Remove new lines/whitespace for security reasons
        }

        private void InitializeHttpClient()
        {
            _httpClient = new HttpClient();
            _httpClient.DefaultRequestHeaders.Add("Connection", "keep-alive");
            _httpClient.DefaultRequestHeaders.Add("Pragma", "no-cache");
            _httpClient.DefaultRequestHeaders.Add("Cache-Control", "no-cache");
            _httpClient.DefaultRequestHeaders.Add("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36");
            _httpClient.DefaultRequestHeaders.Add("Accept", "*/*");
            _httpClient.DefaultRequestHeaders.Add("Sec-GPC", "1");
            _httpClient.DefaultRequestHeaders.Add("Origin", "https://www.icloud.com");
            _httpClient.DefaultRequestHeaders.Add("Sec-Fetch-Site", "same-site");
            _httpClient.DefaultRequestHeaders.Add("Sec-Fetch-Mode", "cors");
            _httpClient.DefaultRequestHeaders.Add("Sec-Fetch-Dest", "empty");
            _httpClient.DefaultRequestHeaders.Add("Referer", "https://www.icloud.com/");
            _httpClient.DefaultRequestHeaders.Add("Accept-Language", "en-US,en-GB;q=0.9,en;q=0.8,cs;q=0.7");
            _httpClient.DefaultRequestHeaders.Add("Cookie", _cookies);
            _httpClient.Timeout = TimeSpan.FromSeconds(10);
        }

        /// <summary>
        /// Generates an email
        /// </summary>
        /// <returns>Response dictionary</returns>
        public async Task<Dictionary<string, object>> GenerateEmailAsync()
        {
            try
            {
                string url = BuildUrl(_baseUrlV1, "generate");
                var content = new StringContent("{\"langCode\": \"en-us\"}", Encoding.UTF8, "application/json");
                
                HttpResponseMessage response = await _httpClient.PostAsync(url, content);
                string jsonResponse = await response.Content.ReadAsStringAsync();
                return JsonSerializer.Deserialize<Dictionary<string, object>>(jsonResponse);
            }
            catch (TaskCanceledException)
            {
                return new Dictionary<string, object>
                {
                    { "error", 1 },
                    { "reason", "Request timed out" }
                };
            }
            catch (Exception ex)
            {
                return new Dictionary<string, object>
                {
                    { "error", 1 },
                    { "reason", ex.Message }
                };
            }
        }

        /// <summary>
        /// Reserves an email and registers it for forwarding
        /// </summary>
        /// <param name="email">The email to reserve</param>
        /// <returns>Response dictionary</returns>
        public async Task<Dictionary<string, object>> ReserveEmailAsync(string email)
        {
            try
            {
                string url = BuildUrl(_baseUrlV1, "reserve");
                var payload = new
                {
                    hme = email,
                    label = _label,
                    note = "Generated by rtuna's iCloud email generator"
                };
                
                var content = new StringContent(JsonSerializer.Serialize(payload), Encoding.UTF8, "application/json");
                
                HttpResponseMessage response = await _httpClient.PostAsync(url, content);
                string jsonResponse = await response.Content.ReadAsStringAsync();
                return JsonSerializer.Deserialize<Dictionary<string, object>>(jsonResponse);
            }
            catch (TaskCanceledException)
            {
                return new Dictionary<string, object>
                {
                    { "error", 1 },
                    { "reason", "Request timed out" }
                };
            }
            catch (Exception ex)
            {
                return new Dictionary<string, object>
                {
                    { "error", 1 },
                    { "reason", ex.Message }
                };
            }
        }

        /// <summary>
        /// List all HME
        /// </summary>
        /// <returns>Response dictionary</returns>
        public async Task<Dictionary<string, object>> ListEmailAsync()
        {
            try
            {
                string url = BuildUrl(_baseUrlV2, "list");
                
                HttpResponseMessage response = await _httpClient.GetAsync(url);
                string jsonResponse = await response.Content.ReadAsStringAsync();
                return JsonSerializer.Deserialize<Dictionary<string, object>>(jsonResponse);
            }
            catch (TaskCanceledException)
            {
                return new Dictionary<string, object>
                {
                    { "error", 1 },
                    { "reason", "Request timed out" }
                };
            }
            catch (Exception ex)
            {
                return new Dictionary<string, object>
                {
                    { "error", 1 },
                    { "reason", ex.Message }
                };
            }
        }

        private string BuildUrl(string baseUrl, string endpoint)
        {
            var queryParams = new StringBuilder();
            foreach (var param in _params)
            {
                if (!string.IsNullOrEmpty(queryParams.ToString()))
                {
                    queryParams.Append("&");
                }
                queryParams.Append($"{param.Key}={Uri.EscapeDataString(param.Value)}");
            }
            
            return $"{baseUrl}/{endpoint}?{queryParams}";
        }

        public async ValueTask DisposeAsync()
        {
            if (_httpClient != null)
            {
                _httpClient.Dispose();
            }
            await Task.CompletedTask;
        }

        public async Task<HideMyEmail> InitializeAsync()
        {
            InitializeHttpClient();
            return await Task.FromResult(this);
        }
    }
} 